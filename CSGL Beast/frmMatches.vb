Imports DevExpress.XtraGrid.Views.Base
Imports DevExpress.XtraGrid.Columns
Imports System.Threading
Public Class frmMatches
    Public threadDatatable As DataTable
    Public threadRowList As New List(Of DataRow)
    Sub New()

        InitializeComponent()
        ' This line of code is generated by Data Source Configuration Wizard
        TblMatchesTableAdapter1.Fill(DbCSGLDataSet1.tblMatches)
        gviewMatches.ShowLoadingPanel()
    End Sub

    Private Sub GridControl1_Click(sender As Object, e As EventArgs) Handles GridControl1.Click

    End Sub

    Private Sub GridControl1_DoubleClick(sender As Object, e As EventArgs) Handles GridControl1.DoubleClick
        Dim CSGLItem As New CSGLItem
        CSGLItem.name = "ty"
    End Sub

    Private Sub frmMatches_Disposed(sender As Object, e As EventArgs) Handles Me.Disposed
        frmMain.WindowState = FormWindowState.Normal
    End Sub

    Private Sub frmMatches_FormClosing(sender As Object, e As FormClosingEventArgs) Handles Me.FormClosing
        TblMatchesTableAdapter1.Update(DbCSGLDataSet1)
    End Sub

    Private Sub frmMatches_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        Me.WindowState = FormWindowState.Normal
        frmMain.WindowState = FormWindowState.Minimized
        gviewMatches.HideLoadingPanel()
    End Sub

    Private Sub BarButtonItem2_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles BarButtonItem2.ItemClick

    End Sub

    Private Sub BarButtonItem1_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles BarButtonItem1.ItemClick
        gviewMatches.ShowFilterEditor(gviewMatches.Columns("Team 1"))
    End Sub

    Private Sub mnuClearFilter_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles mnuClearFilter.ItemClick
        If MsgBox("Are you sure?", MsgBoxStyle.YesNo, "Clear All Filters") = MsgBoxResult.Yes Then
            gviewMatches.ClearColumnsFilter()
        End If

    End Sub

    Private Sub mnuDateRange_EditValueChanged(sender As Object, e As EventArgs) Handles mnuDateRange.EditValueChanged
      

    End Sub

    Private Sub mnuDateRange_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles mnuDateRange.ItemClick

    End Sub

    Public Sub FilterColumn(ByVal column As String, ByVal filtervalue As String)
        If Not String.IsNullOrWhiteSpace(filtervalue) And Not (InStr(filtervalue, "1/1/0001") = -1) Then
            'Dim view As ColumnView = gviewMatches
            column = column.Replace(" ", String.Empty)
            gviewMatches.Columns(column).FilterInfo = New ColumnFilterInfo(String.Format("[{0}]='{1}'", column, filtervalue.Trim))
            'view.ActiveFilter.Add(view.Columns(column), New ColumnFilterInfo(String.Format("[{0}]='{1}'", column, filtervalue), ""))
            LogMe(String.Format(colMatchDate.FilterInfo.DisplayText))
        End If

    End Sub

    Private Sub mnuFilterBest1_CheckedChanged(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles mnuFilterBest1.CheckedChanged
        FilterColumn("BestOf", "1")
        mnuFilterBest2.Checked = False
        mnuFilterBest3.Checked = False
    End Sub

    Private Sub mnuFilterBest2_CheckedChanged(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles mnuFilterBest2.CheckedChanged
        FilterColumn("BestOf", "2")
        mnuFilterBest1.Checked = False
        mnuFilterBest3.Checked = False
    End Sub

    Private Sub mnuFilterBest3_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles mnuFilterBest3.ItemClick
        FilterColumn("BestOf", "3")
        mnuFilterBest2.Checked = False
        mnuFilterBest1.Checked = False
    End Sub

    Private Sub BarLargeButtonItem1_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles BarLargeButtonItem1.ItemClick
        gviewMatches.ShowCustomFilterDialog(colMatchDate)
    End Sub

    Private Sub ShowFind_CheckedChanged(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles mnuCheckShowFind.CheckedChanged
        If mnuCheckShowFind.Checked = True Then gviewMatches.ShowFindPanel()
        If mnuCheckShowFind.Checked = False Then gviewMatches.HideFindPanel()
    End Sub


    Private Sub bgWorkerRefreshMatches_DoWork(sender As Object, e As System.ComponentModel.DoWorkEventArgs) Handles bgWorkerRefreshMatches.DoWork
        Dim CSGLAPI As New CSGLAPI
        Dim dt As New DataTable
        threadDatatable = CSGLAPI.JSONToDataTable(CSGLAPI.urlMatchList, False)
        If threadDatatable IsNot Nothing Then
            For Each row As DataRow In threadDatatable.Rows
                threadRowList.Add(row)
            Next
            Dim listofIDs As New List(Of String)
            For i = 0 To gviewMatches.RowCount - 1
                listofIDs.Add(gviewMatches.GetRowCellValue(i, gviewMatches.Columns("MatchID")).ToString)
            Next
            listofIDs = listofIDs.Distinct.ToList
            LogMe(String.Format("Current ID count: {0}", listofIDs.Count))
            For Each row As DataRow In threadRowList
                Dim id As Integer = listofIDs.IndexOf(row.Item(0).ToString)
                If id >= 0 Then
                    Continue For
                Else
                    'LogMe(String.Format("Found new match! - Match ID: {0}", row.Item(0)))
                    AddNewRow()
                    gviewMatches.SelectRow(gviewMatches.RowCount - 1)
                    Dim newRowHandle As Integer = gviewMatches.GetSelectedRows(0)
                    LogMe(String.Format("{0} is the new row handle.", newRowHandle.ToString))
                    Dim newRow As Object = gviewMatches.GetRow(newRowHandle)
                    For i = 0 To gviewMatches.Columns.Count - 1
                        'SetRowCellValue(newRowHandle, i, "YOMOMMA")
                        SetRowCellValue(newRowHandle, i, row.Item(i).ToString)
                        If gviewMatches.GetRowCellValue(i, "Winner").ToString = "Team 1" Then SetRowCellValue(i, 4, gviewMatches.GetRowCellValue(i, "Team1").ToString)
                        If gviewMatches.GetRowCellValue(i, "Winner").ToString = "Team 2" Then SetRowCellValue(i, 4, gviewMatches.GetRowCellValue(i, "Team2").ToString)
                    Next
                End If
            Next
            My.Settings.LastRefresh = Date.Now
        ElseIf threadDatatable Is Nothing Then
            LogMe("threadDatatable = NOTHING")
        End If
    End Sub

    Private Sub bgWorkerRefreshMatches_RunWorkerCompleted(sender As Object, e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bgWorkerRefreshMatches.RunWorkerCompleted
        LogMe("Worker is DONE.")
    End Sub

    Private Sub tmrBgWorker_Tick(sender As Object, e As EventArgs) Handles tmrBgWorker.Tick
        If bgWorkerRefreshMatches.IsBusy Then
            gviewMatches.ShowLoadingPanel()
        ElseIf bgWorkerRefreshMatches.IsBusy = False Then
            gviewMatches.HideLoadingPanel()
            tmrBgWorker.Enabled = False
        End If
    End Sub

    Private Sub mnuRefreshMatches_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles mnuRefreshMatches.ItemClick
        tmrBgWorker.Enabled = True
        bgWorkerRefreshMatches.RunWorkerAsync()
    End Sub


    Private Delegate Function AddNewRowDelegate() As Integer
    Private Function AddNewRow() As Integer
        If Me.InvokeRequired Then
            Me.Invoke(New AddNewRowDelegate(AddressOf AddNewRow))
        Else
            gviewMatches.AddNewRow()
            Return gviewMatches.FocusedRowHandle
        End If
    End Function

    Private Delegate Sub SetRowCellValueDelegate(ByVal rowhandle As Integer, ByVal col As Integer, ByVal theVal As String)
    Private Sub SetRowCellValue(ByVal rowhandle As Integer, ByVal col As Integer, ByVal theVal As String)
        If Me.InvokeRequired Then
            Dim del As New SetRowCellValueDelegate(AddressOf SetRowCellValue)
            Me.Invoke(del, New Object() {rowhandle, col, theVal})
        Else
            Dim newRowHandle As Integer = gviewMatches.FocusedRowHandle
            Dim newRow As Object = gviewMatches.GetRow(newRowHandle)
            gviewMatches.SetRowCellValue(rowhandle, gviewMatches.Columns(col), theVal)
        End If
    End Sub

    Public Sub InvalidRowExceptionHandler(ByVal sender As Object, ByVal e As DevExpress.XtraGrid.Views.Base.InvalidRowExceptionEventArgs) Handles gviewMatches.InvalidRowException
        'e.ExceptionMode = DevExpress.XtraEditors.Controls.ExceptionMode.Ignore
        LogMe(e.Exception.Data.ToString)
    End Sub



   
    Private Sub gviewMatches_ValidateRow(sender As Object, e As ValidateRowEventArgs) Handles gviewMatches.ValidateRow
        e.Valid = True
    End Sub
End Class
